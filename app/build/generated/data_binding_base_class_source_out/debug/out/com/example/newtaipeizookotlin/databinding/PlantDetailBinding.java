// Generated by data binding compiler. Do not edit!
package com.example.newtaipeizookotlin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.example.newtaipeizookotlin.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class PlantDetailBinding extends ViewDataBinding {
  @NonNull
  public final TextView ABrief;

  @NonNull
  public final TextView mAAlsoKnown;

  @NonNull
  public final TextView mAFamily;

  @NonNull
  public final TextView mAFeature;

  @NonNull
  public final TextView mAFunctionApplication;

  @NonNull
  public final TextView mAGenus;

  @NonNull
  public final TextView mANameCh;

  @NonNull
  public final TextView mANameEn;

  @NonNull
  public final TextView mBriefView;

  @NonNull
  public final TextView mClassView;

  @NonNull
  public final TextView mFeatureView;

  @NonNull
  public final TextView mFunctionApplicationView;

  @NonNull
  public final TextView mInfoView;

  @NonNull
  public final TextView mNameView;

  protected PlantDetailBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextView ABrief, TextView mAAlsoKnown, TextView mAFamily, TextView mAFeature,
      TextView mAFunctionApplication, TextView mAGenus, TextView mANameCh, TextView mANameEn,
      TextView mBriefView, TextView mClassView, TextView mFeatureView,
      TextView mFunctionApplicationView, TextView mInfoView, TextView mNameView) {
    super(_bindingComponent, _root, _localFieldCount);
    this.ABrief = ABrief;
    this.mAAlsoKnown = mAAlsoKnown;
    this.mAFamily = mAFamily;
    this.mAFeature = mAFeature;
    this.mAFunctionApplication = mAFunctionApplication;
    this.mAGenus = mAGenus;
    this.mANameCh = mANameCh;
    this.mANameEn = mANameEn;
    this.mBriefView = mBriefView;
    this.mClassView = mClassView;
    this.mFeatureView = mFeatureView;
    this.mFunctionApplicationView = mFunctionApplicationView;
    this.mInfoView = mInfoView;
    this.mNameView = mNameView;
  }

  @NonNull
  public static PlantDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.plant_detail, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static PlantDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<PlantDetailBinding>inflateInternal(inflater, R.layout.plant_detail, root, attachToRoot, component);
  }

  @NonNull
  public static PlantDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.plant_detail, null, false, component)
   */
  @NonNull
  @Deprecated
  public static PlantDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<PlantDetailBinding>inflateInternal(inflater, R.layout.plant_detail, null, false, component);
  }

  public static PlantDetailBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static PlantDetailBinding bind(@NonNull View view, @Nullable Object component) {
    return (PlantDetailBinding)bind(component, view, R.layout.plant_detail);
  }
}
